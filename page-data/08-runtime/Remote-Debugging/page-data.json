{"componentChunkName":"component---src-pages-08-runtime-remote-debugging-mdx","path":"/08-runtime/Remote-Debugging/","result":{"pageContext":{"frontmatter":{"title":"Remote debugging","description":"Remote debugging"},"relativePagePath":"/08-runtime/Remote-Debugging.mdx","titleType":"page","MdxNode":{"id":"c830d9a9-91fd-501d-9aa1-4fc897c2f2f2","children":[],"parent":"581ac222-c490-5233-a4c4-f80ab67acd22","internal":{"content":"---\ntitle: Remote debugging\ndescription: Remote debugging\n---\n\n## Remote debugging\n\nIt might be necessary to use a remote debugger to step through code execution on the cluster, where log analysis does not provide sufficient information to resolve an issue.\nThe following is an outline of the steps required to connect eclipse's remote debugger to the SPM code running on the cluster.\n\n* Edit the Curam Producer deployment spec to pass debug arguments to the WebSphere® Liberty server.\n* Forward the debugging port from the port running the Curam Producer pod.\n* Create the remote debug configuration in eclipse.\n* Connect the remote debugger to the listener.\n\n### Edit the Curam Producer deployment\n\nEdit the deployment spec for the Curam Producer deployment.\n\n```kubectl edit deployment release-apps-curam-producer```\n\nAdd the following lines under containers:\n\n```\ncontainers:\n- args:\n  - /opt/ibm/wlp/bin/server\n  - debug\n  - defaultServer\n```\n\nThe Curam Producer deployment will terminate its pod and start a new one with the debug configuration.\n\n### Forward the debugging port\n\nNext, forward the WebSphere® Liberty server's debug port to make it available to the remote debugger. 7777 is the default debug port for WebSphere® Liberty.\n\n```kubectl port-forward release-apps-curam-producer-XXXX 7777:7777```\n\n### View the logs in real-time\n\nIn order to tail the logs while you debug use the following command:\n\n```kubectl logs -f release-apps-curam-producer-XXXX```\n\nNote, WebSphere® Liberty will not start the Curam application until the remote debugger attaches to the listener. Therefore, the log will not be populated before you launch the remote debugger.\n\n### Create the remote debug configuration\n\nFrom the Eclipse debug view, create a Java Remote Application. Attach an appropriate source code project, and attach the Java Remote Application to the port you forwarded in the above step.\n\n![Figure 1: Example Debugger Config](../../images/remote_debugger.png)\n<Caption>\n\n*Figure 1:* Example debugger config\n\n</Caption>\n\n### Connect the remote debugger to the listener\n\nLaunch the debugger and debug as usual.\n","type":"Mdx","contentDigest":"0213c18d1ea987a4166574c02c2ef3fa","counter":149,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Remote debugging","description":"Remote debugging"},"exports":{},"rawBody":"---\ntitle: Remote debugging\ndescription: Remote debugging\n---\n\n## Remote debugging\n\nIt might be necessary to use a remote debugger to step through code execution on the cluster, where log analysis does not provide sufficient information to resolve an issue.\nThe following is an outline of the steps required to connect eclipse's remote debugger to the SPM code running on the cluster.\n\n* Edit the Curam Producer deployment spec to pass debug arguments to the WebSphere® Liberty server.\n* Forward the debugging port from the port running the Curam Producer pod.\n* Create the remote debug configuration in eclipse.\n* Connect the remote debugger to the listener.\n\n### Edit the Curam Producer deployment\n\nEdit the deployment spec for the Curam Producer deployment.\n\n```kubectl edit deployment release-apps-curam-producer```\n\nAdd the following lines under containers:\n\n```\ncontainers:\n- args:\n  - /opt/ibm/wlp/bin/server\n  - debug\n  - defaultServer\n```\n\nThe Curam Producer deployment will terminate its pod and start a new one with the debug configuration.\n\n### Forward the debugging port\n\nNext, forward the WebSphere® Liberty server's debug port to make it available to the remote debugger. 7777 is the default debug port for WebSphere® Liberty.\n\n```kubectl port-forward release-apps-curam-producer-XXXX 7777:7777```\n\n### View the logs in real-time\n\nIn order to tail the logs while you debug use the following command:\n\n```kubectl logs -f release-apps-curam-producer-XXXX```\n\nNote, WebSphere® Liberty will not start the Curam application until the remote debugger attaches to the listener. Therefore, the log will not be populated before you launch the remote debugger.\n\n### Create the remote debug configuration\n\nFrom the Eclipse debug view, create a Java Remote Application. Attach an appropriate source code project, and attach the Java Remote Application to the port you forwarded in the above step.\n\n![Figure 1: Example Debugger Config](../../images/remote_debugger.png)\n<Caption>\n\n*Figure 1:* Example debugger config\n\n</Caption>\n\n### Connect the remote debugger to the listener\n\nLaunch the debugger and debug as usual.\n","fileAbsolutePath":"/home/travis/build/IBM/spm-kubernetes/src/pages/08-runtime/Remote-Debugging.mdx"}}}}