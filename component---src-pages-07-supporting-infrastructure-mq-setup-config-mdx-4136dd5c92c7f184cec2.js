(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{vlrY:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return u}));var a,r=t("wx14"),s=t("zLVn"),l=(t("q1tI"),t("7ljp")),c=t("013z"),o=(t("qKvR"),{}),b=(a="InlineNotification",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),Object(l.b)("div",e)}),m={_frontmatter:o},i=c.a;function u(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(l.b)(i,Object(r.a)({},m,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"To support Kubernetes, changes to SPM were required.\nFor more information on these changes, see\n",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.10/com.ibm.curam.wlp.doc/Kubernetes/c_KubArchitecture.html"}),"Kubernetes Architecture")," section in\nthe Knowledge Center."),Object(l.b)("p",null,"When SPM is containerized on Kubernetes, it uses IBM® MQ to manage JMS messages for Cúram Deferred Processes and Cúram Workflows. IBM MQ is a queue managing service from the IBM stack. For more information about MQ, see ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.1.0/com.ibm.mq.pro.doc/q001010_.htm"}),"About IBM MQ"),"."),Object(l.b)("p",null,"If MQ fails, certain functionality will be unusable. This includes and is not limited to, creation of a case and creation of an application."),Object(l.b)("p",null,"The MQ Cluster set up requires two queue managers nodes, with one active/primary queue manager, and one standby/secondary queue manager."),Object(l.b)("p",null,"Social Program Management supports only IBM MQ LTS on a VM. The steps below outline how to do this. In this runbook we will outline the steps to create:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.1.0/com.ibm.mq.pro.doc/q003090_.htm"}),"Queues")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.1.0/com.ibm.mq.pro.doc/q003300_.htm"}),"Listeners")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.1.0/com.ibm.mq.pro.doc/q003220_.htm"}),"Channels")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.1.0/com.ibm.mq.pro.doc/q003320_.htm"}),"Topics"))),Object(l.b)(b,{mdxType:"InlineNotification"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Note:")," The MQ version for this runbook verification is  9.1.0 LTS.")),Object(l.b)("p",null,"For the runbook, two standalone VMs were used as MQ nodes."),Object(l.b)("h3",null,"Queue manager names"),Object(l.b)("p",null,"For runbook configuration, the following naming conversion was used throughout the MQ setup: QM_NamingConvention_AppName. This must be unique, but ensure you change the commands used on this page accordingly."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Queue Name:")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"QM_minikube_curam")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Channel Name:")," This value should be all capitals"),Object(l.b)("p",null,"CHL_NamingConvention_AppName"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"CHL_MINIKUBE_CURAM")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Listeners Name:")," This value should be all capitals"),Object(l.b)("p",null,"LS_NamingConvention_AppName"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"LS_MINIKUBE_CURAM")),Object(l.b)("h2",null,"MQ stages"),Object(l.b)("p",null,"On both MQ nodes run the following command as root:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"su - mqm # Changing user into mqm\nexport PATH=/opt/mqm/inst1/bin:$PATH\n")),Object(l.b)(b,{kind:"warning",mdxType:"InlineNotification"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Important!")),Object(l.b)("p",null,"Run the export PATH command on both MQ nodes, this command will be used in further commands in the runbook.")),Object(l.b)("h3",null,"Shared storage"),Object(l.b)("p",null,"Create the shared storage for our nodes."),Object(l.b)(b,{mdxType:"InlineNotification"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Note:")," Run the commands as root.")),Object(l.b)("p",null,"On the shared node run the following commands:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"mkdir -p /MQHA/logs\nmkdir -p /MQHA/qmgrs\nmkdir -p /MQHA/scratch\nuseradd mqha -s /sbin/nologin\nchown -R mqha:mqha /MQHA/*\n")),Object(l.b)("p",null,"Verify that the UID and GUID match the owner ID by running the following command:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),'echo "/MQHA  MQ.FQDN(rw,sync,no_wdelay,fsid=0,anonuid=1001,anongid=1001)" >> /etc/exports\n')),Object(l.b)("p",null,"Start and enable both the nfs service and rpcbind service by running the following commands:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"systemctl start nfs-server.service\nsystemctl enable nfs-server.service\nsystemctl start rpcbind\nsystemctl enable rpcbind\n")),Object(l.b)("p",null,"On MQ nodes run the following commands:"),Object(l.b)(b,{mdxType:"InlineNotification"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Note:")," Commands to be run as root.")),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),'echo "SHAREDNODEADDRESS:/MQHA  /MQHA  nfs  defaults  0 0" >> /etc/fstab\nsystemctl start rpcbind\nsystemctl enable rpcbind\nmkdir -p /MQHA\nchmod 1777 /MQHA #Check permissions\nmount /MQHA\n')),Object(l.b)("h3",null,"Create QMs"),Object(l.b)("p",null,"When creating the queue, start on the secondary node first then move to the primary node."),Object(l.b)("p",null,"On the secondary MQ node, run the following commands:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"crtmqm -ld /MQHA/logs -md /MQHA/qmgrs QM_minikube_curam\ndspmqinf -o command QM_minikube_curam\n")),Object(l.b)("p",null,"Save the output of the above command. It should look like the following."),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"addmqinf -s QueueManager -v Name=QM_minikube_curam -v Directory=QM_minikube_curam -v Prefix=/var/mqm -v DataPath=/MQHA/qmgrs/QM_minikube_curam\n")),Object(l.b)("p",null,"Wait for /MQHA/qmgrs/QM_minikube_curam/qm.ini to appear on other node"),Object(l.b)("p",null,"On the primary MQ node run the following commands:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"addmqinf -s QueueManager -v Name=QM_minikube_curam -v Directory=QM_minikube_curam -v Prefix=/var/mqm -v DataPath=/MQHA/qmgrs/QM_minikube_curam\nstrmqm -x QM_minikube_curam\n")),Object(l.b)("p",null,"On the secondary MQ node run the following command:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"strmqm -x QM_minikube_curam\n")),Object(l.b)("h3",null,"Create queues"),Object(l.b)("p",null,"On the primary MQ node run the following commands:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"runmqsc QM_minikube_curam <<-EOS\nDEFINE QLOCAL(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWERROR) BOTHRESH(5) BOQNAME(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWENACTMENT) BOTHRESH(5) BOQNAME(QN.WORKFLOWERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.WORKFLOWACTIVITY) BOTHRESH(5) BOQNAME(QN.WORKFLOWERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.DPERROR) BOTHRESH(5) BOQNAME(QN.CURAMDEADMESSAGEQUEUE) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nDEFINE QLOCAL(QN.DPENACTMENT) BOTHRESH(5) BOQNAME(QN.DPERROR) CLWLUSEQ (ANY) DEFBIND (NOTFIXED)\nALTER QMGR CHLAUTH(DISABLED)\nALTER QMGR DEADQ(QN.CURAMDEADMESSAGEQUEUE)\nEOS\n")),Object(l.b)("h3",null,"Create listeners"),Object(l.b)("p",null,"On the primary MQ node run the following commands:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"runmqsc QM_minikube_curam <<-EOS\nDEFINE LISTENER (LS_MINIKUBE_CURAM) TRPTYPE (TCP) CONTROL (QMGR) PORT (1414)\nSTART LISTENER (LS_MINIKUBE_CURAM)\nEOS\n")),Object(l.b)("h3",null,"Create channels"),Object(l.b)("p",null,"On the primary MQ node run the following command:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Enter your MQ node names into the commands below")),Object(l.b)(b,{mdxType:"InlineNotification"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Note:")," CERTLABL expects the value to be lower case ibmwebspheremq + Queue Name\nFor this example it will be ibmwebspheremqqm_minikube_curam")),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"runmqsc QM_minikube_curam <<-EOS\nDEFINE CHANNEL(CHL_MINIKUBE_CURAM) CHLTYPE(SVRCONN)  TRPTYPE(TCP) MCAUSER('mqm') SSLCIPH (TLS_RSA_WITH_AES_128_CBC_SHA256)  CERTLABL ('ibmwebspheremqqm_minikube_curam') SSLCAUTH (OPTIONAL) REPLACE\nDEFINE CHANNEL(CHL_MINIKUBE_CURAM) CHLTYPE(CLNTCONN) TRPTYPE(TCP) CONNAME('Node1(1414),Node2(1414)') QMNAME(QM_minikube_curam) SSLCIPH (TLS_RSA_WITH_AES_128_CBC_SHA256) CERTLABL ('ibmwebspheremqqm_minikube_curam') REPLACE\nEOS\n")),Object(l.b)("h3",null,"Create topics"),Object(l.b)("p",null,"On the primary MQ node run the following command:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"runmqsc QM_minikube_curam <<-EOS\nDEFINE TOPIC (CURAMCACHEINVALIDATIONTOPIC) TOPICSTR (CURAMCACHEINVALIDATIONTOPIC)\nALTER QMGR CONNAUTH('CHECK.PWD')\nDEFINE AUTHINFO('CHECK.PWD') AUTHTYPE(IDPWOS) CHCKLOCL(OPTIONAL) CHCKCLNT(OPTIONAL)\nEOS\n")),Object(l.b)("h3",null,"Configure security"),Object(l.b)("p",null,"The configuration of security is in four parts"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Setting the object type."),Object(l.b)("li",{parentName:"ul"},"Creating the keystore and certs."),Object(l.b)("li",{parentName:"ul"},"Updating the certs on both nodes."),Object(l.b)("li",{parentName:"ul"},"Refreshing security settings.")),Object(l.b)(b,{mdxType:"InlineNotification"},Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Note:")," The application pods run as a non-root user (default). This non-root user must exist on both MQ nodes.")),Object(l.b)("p",null,"On the secondary MQ node run the following command:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"useradd -g 0 -M default && usermod -L default\n")),Object(l.b)("p",null,"On the primary MQ node run the following commands:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"useradd -g 0 -M default && usermod -L default\nrunmqsc QM_minikube_curam <<-EOS\nSET AUTHREC OBJTYPE(QMGR) PRINCIPAL('default') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.DPENACTMENT') PRINCIPAL('default') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.DPERROR') PRINCIPAL('default') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWACTIVITY') PRINCIPAL('default') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWENACTMENT') PRINCIPAL('default') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.WORKFLOWERROR') PRINCIPAL('default') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(QUEUE) PROFILE('QN.CURAMDEADMESSAGEQUEUE') PRINCIPAL('default') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(LISTENER) PROFILE('LS_MINIKUBE_CURAM') PRINCIPAL('default') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(CHANNEL) PROFILE('CHL_MINIKUBE_CURAM') PRINCIPAL('default') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(CLNTCONN) PROFILE('CHL_MINIKUBE_CURAM') PRINCIPAL('default') AUTHADD(ALL)\nSET AUTHREC OBJTYPE(TOPIC) PROFILE('CURAMCACHEINVALIDATIONTOPIC') PRINCIPAL('default') AUTHADD(ALL)\nEOS\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),'runmqckm -keydb -create -db /MQHA/qmgrs/QM_minikube_curam/ssl/key.kdb -type cms -pw Passw0rd -stash\nrunmqakm -cert -create -db /MQHA/qmgrs/QM_minikube_curam/ssl/key.kdb -stashed -label ibmwebspheremqqm_minikube_curam -size 2048 -dn "CN=QM_minikube_curam,O=IBM,C=US" -x509version 3 -expire 365 -sig_alg SHA1WithRSA\nrunmqakm -cert -extract -db /MQHA/qmgrs/QM_minikube_curam/ssl/key.kdb -stashed -label ibmwebspheremqqm_minikube_curam -target /MQHA/qmgrs/QM_minikube_curam/ssl/key_QM_minikube_curam.arm\nrunmqakm -cert -export -db /MQHA/qmgrs/QM_minikube_curam/ssl/key.kdb -stashed -label ibmwebspheremqqm_minikube_curam -target /MQHA/qmgrs/QM_minikube_curam/ssl/key_QM_minikube_curam.p12 -target_type pkcs12 -target_pw Passw0rd\n')),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"openssl pkcs12 -in /MQHA/qmgrs/QM_minikube_curam/ssl/key_QM_minikube_curam.p12 -passin pass:Passw0rd -nocerts -nodes | sed -ne '/-BEGIN PRIVATE KEY-/,/-END PRIVATE KEY-/p' > /MQHA/qmgrs/QM_minikube_curam/ssl/tls.key\nopenssl pkcs12 -in /MQHA/qmgrs/QM_minikube_curam/ssl/key_QM_minikube_curam.p12 -passin pass:Passw0rd -clcerts -nokeys | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /MQHA/qmgrs/QM_minikube_curam/ssl/tls.crt\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"runmqsc QM_minikube_curam <<-EOS\nALTER QMGR CONNAUTH('CHECK.PWD')\nDEFINE AUTHINFO('CHECK.PWD') AUTHTYPE(IDPWOS) CHCKLOCL(OPTIONAL) CHCKCLNT(OPTIONAL)\nREFRESH SECURITY TYPE(SSL)\nREFRESH SECURITY TYPE(AUTHSERV)\nREFRESH SECURITY TYPE(CONNAUTH)\nEOS\n")),Object(l.b)("p",null,"After these stages have been run MQ should be configured."),Object(l.b)("h3",null,"Clean up QMs/channels/listeners"),Object(l.b)("p",null,"Used these steps if you are reconfiguring MQ or cleaning up MQ."),Object(l.b)("p",null,"On both MQ nodes run the following commands:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"endmqm -w QM_minikube_curam\ndltmqm QM_minikube_curam\nrmvmqinf QM_minikube_curam\n")),Object(l.b)("p",null,"On either MQ node run the following commands:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"rm -rf /MQHA/qmgrs/**\nrm -rf /MQHA/logs/**\nrm -rf /MQHA/scratch\nendmqm -w QM_minikube_curam\ndltmqm QM_minikube_curam\nrmvmqinf QM_minikube_curam\n")),Object(l.b)("h3",null,"MQ on OpenShift"),Object(l.b)("h4",null,"Stateful Sets"),Object(l.b)("p",null,"If a highly available MQ cluster is desired, a ",Object(l.b)("strong",{parentName:"p"},"Stateful Set")," can be used. The stateful set used for SPM contains two identical\npods, one active pod and one standby pod. If the active pod goes down, the standby pod is moved into the active role and a new pod is rescheduled in standby mode.\nThis occurs seamlessly, with persistent storage allowing for minimal downtime. The Stateful Set used in SPM requires several values that must be configured prior to\ndeployment. These values are those located under the MQ ",Object(l.b)("inlineCode",{parentName:"p"},"multiInstance")," section within the relevant values file. There, NFS or Ceph can be chosen as the desired\nmulti-instance delivery method."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"NFS")," - In order to deploy with NFS, an NFS server and NFS folder must be available and configured; the supplementalGroups may need to be provided depending on the NFS server security setup."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Ceph")," - In order to deploy with Ceph, the desired Storage Class must be provided.")),Object(l.b)("h4",null,"Persistent Volumes & Persistent Volume Claims"),Object(l.b)("p",null,"A ",Object(l.b)("strong",{parentName:"p"},"PersistentVolume")," (PV) is a piece of storage in the cluster that has been provisioned by an administrator or dynamically provisioned using Storage Classes.\nIt is a resource in the cluster just like a node is a cluster resource. A ",Object(l.b)("strong",{parentName:"p"},"PersistentVolumeClaim")," (PVC) is a request for storage by a user. It is similar to\na Pod. Pods consume node resources and PVCs consume PV resources. Pods can request specific levels of resources (CPU and Memory). Claims can request specific\nsize and access modes."),Object(l.b)("p",null,"When using NFS as the desired multi-instance method, the PV and PVCs must be configured by the user. Within the PVs, the NFS IP and NFS folder must be provided.\nIn the PV, a ",Object(l.b)("inlineCode",{parentName:"p"},"claimRef")," can be defined in order to ensure that the correct PVC matches with the correct PV. The templates provided also contain labels, which can\nalso be used to ensure correct coupling."),Object(l.b)("p",null,"If using Ceph, the PVs are dynamically configured. Therefore, no further configuration is required."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-07-supporting-infrastructure-mq-setup-config-mdx-4136dd5c92c7f184cec2.js.map